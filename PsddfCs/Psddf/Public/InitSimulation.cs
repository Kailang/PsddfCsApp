namespace PsddfCs {
	public partial class Psddf {
		/// <summary>
		/// Init status
		/// </summary>
		public void InitSimulation () {
			CompressibleFoundationTotalInitialThickness = 0;
			for (int i = 1; i <= CompressibleFoundationLayers; i++)
				CompressibleFoundationTotalInitialThickness += CompressibleFoundationInitialThicknesses[i];

			DredgedFillTotleInitialThickness = 0;
			for (int i = 1; i <= DredgedFillLayers; i++)
				DredgedFillTotleInitialThickness += DredgedFillInitialThicknesses[i];

			TotalMaterialTypes = CompressibleFoundationMaterialTypes + DredgedFillMaterialTypes;

			TotalTime = intx(PrintTimeDates[PrintTimes]);

			if (CompressibleFoundationLayers == 0) {
				// Noncompressible foundation;
				IsFoundationCompressible = 2;
				CompressibleFoundationMaterialTypes = 0;
			} else {
				// Compressible foundation;
				IsFoundationCompressible = 1;
			}

			// Output/Calculations
			Io.OpenWrite(OUT, OutputFilePath + ".pso");
			// Surface Elevation data
			Io.OpenWrite(PLOT, OutputFilePath + ".psp");
			// Compressible Foundation Results
			Io.OpenWrite(GCF, OutputFilePath + ".pgc");
			// Dredged Material Results
			Io.OpenWrite(GDF, OutputFilePath + ".pgd");
			// The file generated by PSDDF for use with the CAP model
			Io.OpenWrite(RCY, OutputFilePath + ".rcy");

			if (IsNewSimulation != 1) {
				Io.WriteLine(
					OUT, "\n         Continuation of Problem       {0,-60}",
					ProblemName);
			}

			Cmd.WriteLine("\nCheck the initial void ratio against the void ratio at zero effective stress...");
			for (int i = 1; i <= DredgedFillLayers; i++) {
				IsCurveNotAdjusteds[i] = true;

				if (DredgedFillInitialVoidRatios[i] != VoidRatios[1, DredgedFillMaterialIDs[i]]) {
					Cmd.WriteLine("DredgedFillInitialVoidRatios[{0}] != VoidRatios[1, {1}], auto adjust", i, DredgedFillMaterialIDs[i]);
					Adjust(Dimension1, Dimension2, i, DredgedFillMaterialIDs[i], RelationDefinitionLines[DredgedFillMaterialIDs[i]], VoidRatios, ref IsCurveNotAdjusteds[DredgedFillMaterialIDs[i]]);
				}
			}
		}
	}
}
